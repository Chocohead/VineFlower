package pkg;

import java.lang.runtime.SwitchBootstraps;

public class TestRecordPattern1 {
   void test(Object o) {
      if (o instanceof TestRecordPattern1.Point(int a, int b)) {// 8
         System.out.println(a + b);// 9
      }
   }// 11

   void test2(Object o) {
      switch(o) {// 14
         case null:
            System.out.println("null");// 16
            break;
         case TestRecordPattern1.Point var8:
            int obj = $proxy$a((TestRecordPattern1.Point)o);
            int a = Integer.valueOf(obj);// 15
            int var7 = $proxy$b((TestRecordPattern1.Point)o);
            int b = Integer.valueOf(var7);
            System.out.println(a + b);
            break;
         default:
            System.out.println("everything else");// 17
      }
   }// 19

   int test3(Object o) {
      Object var2 = o;
      byte var3 = 0;

      while(true) {
         int var10000;
         switch(SwitchBootstraps.typeSwitch<"typeSwitch",TestRecordPattern1.Point,TestRecordPattern1.Point,Object>(var2, var3)) {
            case -1:
               var10000 = -1;// 23
               break;
            case 0:
               int var8 = $proxy$a((TestRecordPattern1.Point)var2);
               int a = Integer.valueOf(var8);// 24
               int var9 = $proxy$b((TestRecordPattern1.Point)var2);
               int b = Integer.valueOf(var9);
               if (a <= 0 || b <= 0) {
                  var3 = 1;
                  continue;
               }

               var10000 = a + b;// 26
               break;
            case 1:
               TestRecordPattern1.Point p = (TestRecordPattern1.Point)var2;// 27
               throw new IllegalArgumentException("Negative point not allowed");
            default:
               throw new IllegalArgumentException("Only points or null allowed");// 28
         }

         return var10000;// 22
      }
   }

   static record Point(int a, int b) {
   }
}

class 'pkg/TestRecordPattern1' {
   method 'test (Ljava/lang/Object;)V' {
      0      6
      4      6
      2b      7
      2c      7
      2d      7
      2e      7
      2f      7
      30      7
      31      7
      34      9
   }

   method 'test2 (Ljava/lang/Object;)V' {
      0      12
      4      12
      b      12
      24      17
      25      17
      26      17
      27      17
      28      17
      29      17
      2a      17
      2b      17
      2c      17
      2d      18
      2e      18
      2f      18
      30      18
      31      18
      32      18
      33      18
      34      18
      35      18
      36      18
      37      19
      38      19
      39      19
      3a      19
      3b      19
      3c      19
      3d      19
      3e      19
      3f      19
      40      20
      41      20
      42      20
      43      20
      44      20
      45      20
      46      20
      47      20
      48      20
      49      20
      4a      21
      4b      21
      4c      21
      4d      21
      4e      21
      4f      21
      50      21
      51      21
      52      21
      53      21
      54      21
      55      22
      58      14
      59      14
      5a      14
      5b      14
      5c      14
      5d      14
      5e      14
      5f      14
      60      15
      66      24
      67      24
      68      24
      69      24
      6a      24
      6b      24
      6e      26
   }

   method 'test3 (Ljava/lang/Object;)I' {
      0      29
      1      29
      2      30
      3      30
      4      34
      5      34
      6      34
      7      34
      8      34
      9      34
      a      34
      b      34
      24      36
      25      37
      28      39
      29      39
      2a      39
      2b      39
      2c      39
      2d      39
      2e      39
      2f      39
      30      39
      31      40
      32      40
      33      40
      34      40
      35      40
      36      40
      37      40
      38      40
      39      40
      3a      40
      3b      41
      3c      41
      3d      41
      3e      41
      3f      41
      40      41
      41      41
      42      41
      43      41
      44      42
      45      42
      46      42
      47      42
      48      42
      49      42
      4a      42
      4b      42
      4c      42
      4d      42
      4e      43
      4f      43
      50      43
      53      43
      54      43
      55      43
      58      44
      59      44
      5a      45
      5d      48
      5e      48
      5f      48
      60      48
      61      48
      62      49
      65      51
      66      51
      67      51
      68      51
      69      51
      6a      51
      6f      52
      70      52
      74      52
      7c      54
      7d      54
      81      54
      82      57
   }
}

Lines mapping:
8 <-> 7
9 <-> 8
11 <-> 10
14 <-> 13
15 <-> 19
16 <-> 15
17 <-> 25
19 <-> 27
22 <-> 58
23 <-> 37
24 <-> 41
26 <-> 49
27 <-> 52
28 <-> 55
Not mapped:
1
